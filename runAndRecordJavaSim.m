function runAndRecordJavaSim(a, scriptnum, savename, PM, waitDurationInMs, runDurationInMs, recordWhat)
%===convert runtime to number of steps===%
waitDurationInSteps = waitDurationInMs / a.dt;
runDurationInSteps = runDurationInMs / a.dt;

%wait
t1 = clock;
disp(['waiting for parameter ' num2str(scriptnum)]);
a.jump(waitDurationInSteps);

%start main run
disp(['starting main run']);
%==show runtime estimates==%
pretime = etime(clock,t1);
disp(['elapsed time = ' num2str(pretime) ' sec']);
expwait = pretime * runDurationInSteps / waitDurationInSteps;  %bc of three waits and recording
expwaithrs = floor(expwait / 3600);
expwaitmins= floor(mod(expwait / 60,60));
disp(['ETA = ' num2str(expwaithrs) ' hrs ' num2str(expwaitmins) ' mins']);
t1 = clock;
expwaitsecs = floor(expwait);
disp(['which is at ' num2str(floor(mod(t1(4)+t1(5)/60+expwaitsecs/3600,24))) ':' num2str(floor(mod(t1(5)+expwaitsecs/60,60)))]);

%initialize spike trains
durationInSec = runDurationInMs / 1000;
spikeTrainExc = sim.SpikeTrain(a.numExcitatory,40,durationInSec);
spikeTrainInh = sim.SpikeTrain(a.numInhibitory,80,durationInSec);
spikeTrainFB  = sim.SpikeTrain(a.numFB,100,durationInSec);

%==run and record==%
disp('running');
t1 = clock;

for step = 1 : runDurationInSteps
    a.step();

    if mod(step,1000) == 1
        disp(a.t);
    end
    
    spikeTrainExc.collectSpikes(a.spikesNowExc,a.spikeTimesNowExc,a.numSpikesNowExc);
    spikeTrainInh.collectSpikes(a.spikesNowInh,a.spikeTimesNowInh,a.numSpikesNowInh);
    spikeTrainFB.collectSpikes( a.l6SpikesNow ,a.l6SpikeTimesNow ,a.numL6SpikesNow );
end

disp(['elapsed time = ' num2str(etime(clock,t1)) ' sec']);
disp('trying to save...')

spikesExc = spikeTrainExc.spikes;
spikesInh = spikeTrainInh.spikes;
spikesFB  = spikeTrainFB.spikes;

spikeTimesExc = spikeTrainExc.spikeTimes;
spikeTimesInh = spikeTrainInh.spikeTimes;
spikeTimesFB  = spikeTrainFB.spikeTimes;

numSpikesExc = spikeTrainExc.numSpikes;
numSpikesInh = spikeTrainInh.numSpikes;
numSpikesFB  = spikeTrainFB.numSpikes;

numEPreExc = a.numEPreExc;
numIPreExc = a.numIPreExc;
numEPreInh = a.numEPreInh;
numIPreInh = a.numIPreInh;

switch recordWhat
    case 'spikes'        
        save([savename '.mat'],...
            'PM',...
            'scriptnum',...
            'numEPreExc',...
            'numIPreExc',...
            'numEPreInh',...
            'numIPreInh',...
            'spikesExc',...
            'spikeTimesExc',...
            'numSpikesExc',...
            'spikesInh',...
            'spikeTimesInh',...
            'numSpikesInh',...
            'spikesFB',...
            'spikeTimesFB',...
            'numSpikesFB',...
            'runDurationInMs');
    case 'spikesAndPerCellAvgCurrent'
        numSamples = a.numCurrentSamples;
        avgVExc = a.avgVExc / numSamples;
        avgVInh = a.avgVInh / numSamples;
        avgRecCurrentExc = a.currentToE(:,1) / numSamples; 
        avgFBCurrentExc  = a.currentToE(:,2) / numSamples; 
        avgLGNCurrentExc = a.currentToE(:,3) / numSamples; 
        avgAmbCurrentExc = a.currentToE(:,4) / numSamples; 
        avgInhCurrentExc = a.currentToE(:,5) / numSamples; 
        avgLeakCurrentExc= a.currentToE(:,6) / numSamples; 
        avgRecCurrentInh = a.currentToI(:,1) / numSamples; 
        avgFBCurrentInh  = a.currentToI(:,2) / numSamples; 
        avgLGNCurrentInh = a.currentToI(:,3) / numSamples; 
        avgAmbCurrentInh = a.currentToI(:,4) / numSamples; 
        avgInhCurrentInh = a.currentToI(:,5) / numSamples; 
        avgLeakCurrentInh= a.currentToI(:,6) / numSamples;
        
        save([savename '.mat'],...
            'PM',...
            'scriptnum',...
            'numEPreExc',...
            'numIPreExc',...
            'numEPreInh',...
            'numIPreInh',...
            'spikesExc',...
            'spikeTimesExc',...
            'numSpikesExc',...
            'spikesInh',...
            'spikeTimesInh',...
            'numSpikesInh',...
            'spikesFB',...
            'spikeTimesFB',...
            'numSpikesFB',...
            'runDurationInMs',...
            'avgVExc',...
            'avgVInh',...
            'avgRecCurrentExc',...
            'avgFBCurrentExc',...
            'avgLGNCurrentExc',...
            'avgAmbCurrentExc',...
            'avgInhCurrentExc',...
            'avgLeakCurrentExc',...
            'avgRecCurrentInh',...
            'avgFBCurrentInh',...
            'avgLGNCurrentInh',...
            'avgAmbCurrentInh',...
            'avgInhCurrentInh',...
            'avgLeakCurrentInh');
end
disp('saved.')

t2=clock;
disp(['Actual end time is ' num2str(t2(4)) ':' num2str(t2(5))]);

end
